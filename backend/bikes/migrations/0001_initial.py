# Generated by Django 5.2.1 on 2025-06-12 04:28

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="BikeCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("sport", "Sport"),
                            ("supersport", "Supersport"),
                            ("naked", "Naked"),
                            ("touring", "Touring"),
                            ("cruiser", "Cruiser"),
                            ("adventure", "Adventure"),
                            ("dual_sport", "Dual Sport"),
                            ("dirt_bike", "Dirt Bike"),
                            ("scooter", "Scooter"),
                            ("electric", "Electric"),
                            ("cafe_racer", "Cafe Racer"),
                            ("bobber", "Bobber"),
                            ("chopper", "Chopper"),
                        ],
                        db_index=True,
                        max_length=50,
                        unique=True,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name_plural": "Bike Categories",
                "db_table": "bike_categories",
            },
        ),
        migrations.CreateModel(
            name="ECUType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100, unique=True)),
                ("manufacturer", models.CharField(max_length=100)),
                ("version", models.CharField(blank=True, max_length=50)),
                ("processor", models.CharField(blank=True, max_length=100)),
                ("memory_kb", models.PositiveIntegerField(blank=True, null=True)),
                ("flash_memory_kb", models.PositiveIntegerField(blank=True, null=True)),
                ("is_tunable", models.BooleanField(db_index=True, default=True)),
                ("requires_cable", models.BooleanField(default=True)),
                ("supports_obd", models.BooleanField(default=False)),
                ("supports_can_bus", models.BooleanField(default=True)),
                (
                    "communication_protocol",
                    models.CharField(
                        choices=[
                            ("kline", "K-Line"),
                            ("can", "CAN Bus"),
                            ("uart", "UART"),
                            ("spi", "SPI"),
                            ("i2c", "I2C"),
                        ],
                        default="can",
                        max_length=20,
                    ),
                ),
                ("baud_rate", models.PositiveIntegerField(default=500000)),
                ("supported_formats", models.JSONField(default=list)),
                ("backup_format", models.CharField(default="bin", max_length=10)),
                ("requires_immobilizer_bypass", models.BooleanField(default=False)),
                ("checksum_validation", models.BooleanField(default=True)),
                ("description", models.TextField(blank=True)),
                ("documentation_url", models.URLField(blank=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "ecu_types",
                "indexes": [
                    models.Index(
                        fields=["manufacturer"], name="ecu_types_manufac_be09f4_idx"
                    ),
                    models.Index(
                        fields=["is_tunable"], name="ecu_types_is_tuna_357a45_idx"
                    ),
                    models.Index(
                        fields=["communication_protocol"],
                        name="ecu_types_communi_00358a_idx",
                    ),
                    models.Index(
                        fields=["is_active"], name="ecu_types_is_acti_4e3277_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="EngineType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100, unique=True)),
                (
                    "configuration",
                    models.CharField(
                        choices=[
                            ("single", "Single Cylinder"),
                            ("parallel_twin", "Parallel Twin"),
                            ("v_twin", "V-Twin"),
                            ("inline_three", "Inline Three"),
                            ("inline_four", "Inline Four"),
                            ("v_four", "V-Four"),
                            ("inline_six", "Inline Six"),
                            ("boxer", "Boxer"),
                            ("rotary", "Rotary"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "cooling_system",
                    models.CharField(
                        choices=[
                            ("air", "Air Cooled"),
                            ("liquid", "Liquid Cooled"),
                            ("oil", "Oil Cooled"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "fuel_system",
                    models.CharField(
                        choices=[
                            ("carburetor", "Carburetor"),
                            ("fuel_injection", "Fuel Injection"),
                            ("direct_injection", "Direct Injection"),
                        ],
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "bike_engine_types",
                "indexes": [
                    models.Index(
                        fields=["configuration"], name="bike_engine_configu_07b62c_idx"
                    ),
                    models.Index(
                        fields=["fuel_system"], name="bike_engine_fuel_sy_57475f_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Manufacturer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100, unique=True)),
                ("country", models.CharField(max_length=100)),
                ("founded_year", models.PositiveIntegerField(blank=True, null=True)),
                ("website", models.URLField(blank=True)),
                ("logo_url", models.URLField(blank=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "bike_manufacturers",
                "indexes": [
                    models.Index(fields=["name"], name="bike_manufa_name_e79aa5_idx"),
                    models.Index(
                        fields=["is_active"], name="bike_manufa_is_acti_03ec91_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Motorcycle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model_name", models.CharField(db_index=True, max_length=100)),
                (
                    "year",
                    models.PositiveIntegerField(
                        db_index=True,
                        validators=[
                            django.core.validators.MinValueValidator(1900),
                            django.core.validators.MaxValueValidator(2030),
                        ],
                    ),
                ),
                (
                    "displacement_cc",
                    models.PositiveIntegerField(
                        db_index=True,
                        validators=[
                            django.core.validators.MinValueValidator(50),
                            django.core.validators.MaxValueValidator(3000),
                        ],
                    ),
                ),
                ("cylinders", models.PositiveSmallIntegerField(default=1)),
                (
                    "bore_mm",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "stroke_mm",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "compression_ratio",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=4, null=True
                    ),
                ),
                ("max_power_hp", models.PositiveIntegerField(blank=True, null=True)),
                ("max_power_rpm", models.PositiveIntegerField(blank=True, null=True)),
                ("max_torque_nm", models.PositiveIntegerField(blank=True, null=True)),
                ("max_torque_rpm", models.PositiveIntegerField(blank=True, null=True)),
                ("dry_weight_kg", models.PositiveIntegerField(blank=True, null=True)),
                ("wet_weight_kg", models.PositiveIntegerField(blank=True, null=True)),
                ("seat_height_mm", models.PositiveIntegerField(blank=True, null=True)),
                ("wheelbase_mm", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "fuel_capacity_liters",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=4, null=True
                    ),
                ),
                ("top_speed_kmh", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "acceleration_0_100_seconds",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=4, null=True
                    ),
                ),
                (
                    "fuel_consumption_l100km",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=4, null=True
                    ),
                ),
                (
                    "transmission_type",
                    models.CharField(
                        choices=[
                            ("manual", "Manual"),
                            ("automatic", "Automatic"),
                            ("cvt", "CVT"),
                            ("dct", "Dual Clutch"),
                        ],
                        default="manual",
                        max_length=20,
                    ),
                ),
                ("gears", models.PositiveSmallIntegerField(default=6)),
                ("abs", models.BooleanField(db_index=True, default=False)),
                ("traction_control", models.BooleanField(default=False)),
                ("riding_modes", models.BooleanField(default=False)),
                ("quickshifter", models.BooleanField(default=False)),
                ("cruise_control", models.BooleanField(default=False)),
                ("electronic_suspension", models.BooleanField(default=False)),
                (
                    "msrp_usd",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "production_start_year",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "production_end_year",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("is_discontinued", models.BooleanField(db_index=True, default=False)),
                ("primary_image_url", models.URLField(blank=True)),
                ("gallery_images", models.JSONField(blank=True, default=list)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bikes.bikecategory",
                    ),
                ),
                (
                    "engine_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bikes.enginetype",
                    ),
                ),
                (
                    "manufacturer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bikes.manufacturer",
                    ),
                ),
            ],
            options={
                "db_table": "motorcycles",
                "ordering": ["manufacturer__name", "model_name", "-year"],
            },
        ),
        migrations.CreateModel(
            name="BikeSpecification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("valve_configuration", models.CharField(blank=True, max_length=50)),
                (
                    "valves_per_cylinder",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                ("ignition_system", models.CharField(blank=True, max_length=100)),
                ("starter_system", models.CharField(blank=True, max_length=50)),
                ("lubrication_system", models.CharField(blank=True, max_length=100)),
                (
                    "oil_capacity_liters",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=4, null=True
                    ),
                ),
                ("frame_type", models.CharField(blank=True, max_length=100)),
                ("frame_material", models.CharField(blank=True, max_length=50)),
                ("swingarm_type", models.CharField(blank=True, max_length=100)),
                ("front_suspension", models.CharField(blank=True, max_length=200)),
                (
                    "front_suspension_travel_mm",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("rear_suspension", models.CharField(blank=True, max_length=200)),
                (
                    "rear_suspension_travel_mm",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("front_brake_type", models.CharField(blank=True, max_length=100)),
                (
                    "front_brake_disc_size_mm",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("rear_brake_type", models.CharField(blank=True, max_length=100)),
                (
                    "rear_brake_disc_size_mm",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("front_tire_size", models.CharField(blank=True, max_length=50)),
                ("rear_tire_size", models.CharField(blank=True, max_length=50)),
                ("front_wheel_size", models.CharField(blank=True, max_length=20)),
                ("rear_wheel_size", models.CharField(blank=True, max_length=20)),
                (
                    "overall_length_mm",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "overall_width_mm",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "overall_height_mm",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "ground_clearance_mm",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("headlight_type", models.CharField(blank=True, max_length=50)),
                ("instruments", models.TextField(blank=True)),
                ("connectivity_features", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "motorcycle",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="specifications",
                        to="bikes.motorcycle",
                    ),
                ),
            ],
            options={
                "db_table": "bike_specifications",
            },
        ),
        migrations.CreateModel(
            name="BikeReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "review_type",
                    models.CharField(
                        choices=[
                            ("professional", "Professional Review"),
                            ("user", "User Review"),
                            ("editorial", "Editorial"),
                        ],
                        default="professional",
                        max_length=20,
                    ),
                ),
                ("source", models.CharField(max_length=100)),
                ("author", models.CharField(blank=True, max_length=100)),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "rating",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=3,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("review_url", models.URLField(blank=True)),
                ("published_date", models.DateField(blank=True, null=True)),
                ("is_featured", models.BooleanField(db_index=True, default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "motorcycle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="bikes.motorcycle",
                    ),
                ),
            ],
            options={
                "db_table": "bike_reviews",
            },
        ),
        migrations.CreateModel(
            name="BikeImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image_url", models.URLField()),
                (
                    "image_type",
                    models.CharField(
                        choices=[
                            ("main", "Main Product Image"),
                            ("side", "Side View"),
                            ("front", "Front View"),
                            ("rear", "Rear View"),
                            ("engine", "Engine Detail"),
                            ("instrument", "Instrument Cluster"),
                            ("gallery", "Gallery Image"),
                        ],
                        default="gallery",
                        max_length=20,
                    ),
                ),
                ("caption", models.CharField(blank=True, max_length=200)),
                ("alt_text", models.CharField(blank=True, max_length=200)),
                ("order", models.PositiveSmallIntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "motorcycle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="bikes.motorcycle",
                    ),
                ),
            ],
            options={
                "db_table": "bike_images",
                "ordering": ["order", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="MotorcycleECU",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("part_number", models.CharField(blank=True, max_length=100)),
                ("software_version", models.CharField(blank=True, max_length=50)),
                ("hardware_version", models.CharField(blank=True, max_length=50)),
                ("location", models.CharField(blank=True, max_length=200)),
                ("connector_type", models.CharField(blank=True, max_length=100)),
                ("pin_count", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("memory_address_start", models.CharField(blank=True, max_length=20)),
                ("memory_address_end", models.CharField(blank=True, max_length=20)),
                ("checksum_location", models.CharField(blank=True, max_length=20)),
                ("market_region", models.CharField(blank=True, max_length=50)),
                ("emissions_standard", models.CharField(blank=True, max_length=20)),
                ("is_primary", models.BooleanField(default=True)),
                ("is_verified", models.BooleanField(db_index=True, default=False)),
                ("verification_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "ecu_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="bikes.ecutype"
                    ),
                ),
                (
                    "motorcycle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ecus",
                        to="bikes.motorcycle",
                    ),
                ),
            ],
            options={
                "db_table": "motorcycle_ecus",
            },
        ),
        migrations.AddIndex(
            model_name="motorcycle",
            index=models.Index(
                fields=["manufacturer", "model_name"],
                name="motorcycles_manufac_9ef480_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="motorcycle",
            index=models.Index(fields=["year"], name="motorcycles_year_db6dd9_idx"),
        ),
        migrations.AddIndex(
            model_name="motorcycle",
            index=models.Index(
                fields=["displacement_cc"], name="motorcycles_displac_9337b2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="motorcycle",
            index=models.Index(
                fields=["category"], name="motorcycles_categor_13b55f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="motorcycle",
            index=models.Index(
                fields=["max_power_hp"], name="motorcycles_max_pow_c5ac51_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="motorcycle",
            index=models.Index(
                fields=["is_active"], name="motorcycles_is_acti_a91bc2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="motorcycle",
            index=models.Index(
                fields=["is_discontinued"], name="motorcycles_is_disc_504151_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="motorcycle",
            index=models.Index(fields=["abs"], name="motorcycles_abs_e25111_idx"),
        ),
        migrations.AddIndex(
            model_name="motorcycle",
            index=models.Index(
                fields=["msrp_usd"], name="motorcycles_msrp_us_f249e7_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="motorcycle",
            unique_together={("manufacturer", "model_name", "year")},
        ),
        migrations.AddIndex(
            model_name="bikereview",
            index=models.Index(
                fields=["motorcycle", "review_type"],
                name="bike_review_motorcy_c03056_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="bikereview",
            index=models.Index(fields=["rating"], name="bike_review_rating_a92295_idx"),
        ),
        migrations.AddIndex(
            model_name="bikereview",
            index=models.Index(
                fields=["is_featured"], name="bike_review_is_feat_f6d767_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="bikereview",
            index=models.Index(
                fields=["published_date"], name="bike_review_publish_1d7b1f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="bikeimage",
            index=models.Index(
                fields=["motorcycle", "image_type"],
                name="bike_images_motorcy_f2645d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="bikeimage",
            index=models.Index(fields=["order"], name="bike_images_order_4e98c2_idx"),
        ),
        migrations.AddIndex(
            model_name="motorcycleecu",
            index=models.Index(
                fields=["motorcycle"], name="motorcycle__motorcy_4965db_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="motorcycleecu",
            index=models.Index(
                fields=["ecu_type"], name="motorcycle__ecu_typ_f534ad_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="motorcycleecu",
            index=models.Index(
                fields=["is_primary"], name="motorcycle__is_prim_51f501_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="motorcycleecu",
            index=models.Index(
                fields=["is_verified"], name="motorcycle__is_veri_3890e4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="motorcycleecu",
            index=models.Index(
                fields=["market_region"], name="motorcycle__market__341c36_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="motorcycleecu",
            unique_together={("motorcycle", "ecu_type", "market_region")},
        ),
    ]
