# Generated by Django 5.2.1 on 2025-06-12 04:28

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("bikes", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SafetyRating",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("LOW", "Low Risk"),
                            ("MEDIUM", "Medium Risk"),
                            ("HIGH", "High Risk"),
                            ("CRITICAL", "Critical Risk"),
                        ],
                        db_index=True,
                        max_length=10,
                        unique=True,
                    ),
                ),
                ("description", models.TextField()),
                ("color_code", models.CharField(max_length=7)),
                ("warning_text", models.TextField()),
                ("requires_consent", models.BooleanField(default=True)),
                ("requires_backup", models.BooleanField(default=True)),
                ("max_downloads", models.PositiveIntegerField(default=3)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "safety_ratings",
            },
        ),
        migrations.CreateModel(
            name="TuneCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("performance", "Performance"),
                            ("economy", "Economy"),
                            ("racing", "Racing"),
                            ("track", "Track Day"),
                            ("street", "Street"),
                            ("touring", "Touring"),
                            ("emission_delete", "Emission Delete"),
                            ("custom", "Custom"),
                            ("diagnostic", "Diagnostic"),
                            ("stock_replacement", "Stock Replacement"),
                        ],
                        db_index=True,
                        max_length=50,
                        unique=True,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("color_code", models.CharField(default="#007bff", max_length=7)),
                ("icon_name", models.CharField(blank=True, max_length=50)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name_plural": "Tune Categories",
                "db_table": "tune_categories",
            },
        ),
        migrations.CreateModel(
            name="TuneType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("flash", "Flash Tune"),
                            ("piggyback", "Piggyback Module"),
                            ("standalone", "Standalone ECU"),
                            ("fuel_controller", "Fuel Controller"),
                            ("ignition_map", "Ignition Map"),
                            ("full_system", "Full System Tune"),
                        ],
                        db_index=True,
                        max_length=50,
                        unique=True,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("technical_details", models.TextField(blank=True)),
                (
                    "skill_level_required",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                            ("expert", "Expert Only"),
                        ],
                        default="intermediate",
                        max_length=20,
                    ),
                ),
                ("reversible", models.BooleanField(default=True)),
                ("requires_hardware", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "tune_types",
            },
        ),
        migrations.CreateModel(
            name="Tune",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=200)),
                ("version", models.CharField(default="1.0", max_length=20)),
                ("description", models.TextField()),
                ("short_description", models.CharField(max_length=300)),
                ("required_modifications", models.TextField(blank=True)),
                ("exhaust_systems", models.JSONField(default=list)),
                ("air_intake_systems", models.JSONField(default=list)),
                ("power_gain_hp", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "power_gain_percentage",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("torque_gain_nm", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "torque_gain_percentage",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "fuel_economy_change_percentage",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("fuel_map_changes", models.TextField(blank=True)),
                ("ignition_timing_changes", models.TextField(blank=True)),
                ("rev_limit_change", models.IntegerField(blank=True, null=True)),
                ("speed_limiter_removed", models.BooleanField(default=False)),
                (
                    "tune_file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="tunes/files/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["bin", "hex", "ecu", "map"]
                            )
                        ],
                    ),
                ),
                (
                    "backup_file",
                    models.FileField(blank=True, null=True, upload_to="tunes/backups/"),
                ),
                (
                    "dyno_chart",
                    models.ImageField(
                        blank=True, null=True, upload_to="tunes/dyno_charts/"
                    ),
                ),
                ("installation_video", models.URLField(blank=True)),
                ("preview_images", models.JSONField(default=list)),
                (
                    "pricing_type",
                    models.CharField(
                        choices=[
                            ("free", "Free"),
                            ("paid", "Paid"),
                            ("subscription", "Subscription"),
                            ("rental", "Rental"),
                        ],
                        db_index=True,
                        default="paid",
                        max_length=20,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
                (
                    "rental_price_per_day",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                (
                    "subscription_price_monthly",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                ("is_open_source", models.BooleanField(db_index=True, default=False)),
                ("allow_modifications", models.BooleanField(default=False)),
                ("requires_license_agreement", models.BooleanField(default=True)),
                ("max_downloads_per_purchase", models.PositiveIntegerField(default=3)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("pending_review", "Pending Review"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("suspended", "Suspended"),
                            ("archived", "Archived"),
                        ],
                        db_index=True,
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("approval_date", models.DateTimeField(blank=True, null=True)),
                ("rejection_reason", models.TextField(blank=True)),
                ("moderator_notes", models.TextField(blank=True)),
                ("is_featured", models.BooleanField(db_index=True, default=False)),
                ("is_track_only", models.BooleanField(db_index=True, default=False)),
                ("is_race_fuel_required", models.BooleanField(default=False)),
                ("requires_premium_fuel", models.BooleanField(default=False)),
                ("dyno_tested", models.BooleanField(db_index=True, default=False)),
                ("street_legal", models.BooleanField(db_index=True, default=True)),
                (
                    "download_count",
                    models.PositiveIntegerField(db_index=True, default=0),
                ),
                ("view_count", models.PositiveIntegerField(default=0)),
                ("like_count", models.PositiveIntegerField(default=0)),
                ("review_count", models.PositiveIntegerField(default=0)),
                (
                    "average_rating",
                    models.DecimalField(
                        db_index=True, decimal_places=2, default=0.0, max_digits=3
                    ),
                ),
                (
                    "total_revenue",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                ("tags", models.JSONField(default=list)),
                ("changelog", models.TextField(blank=True)),
                ("installation_instructions", models.TextField(blank=True)),
                ("warranty_info", models.TextField(blank=True)),
                ("support_contact", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "published_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                ("last_downloaded_at", models.DateTimeField(blank=True, null=True)),
                (
                    "safety_rating",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tunes.safetyrating",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tunes.tunecategory",
                    ),
                ),
            ],
            options={
                "db_table": "tunes",
                "ordering": ["-published_at", "-download_count"],
            },
        ),
        migrations.CreateModel(
            name="TuneCollection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=200)),
                ("description", models.TextField()),
                ("cover_image", models.URLField(blank=True)),
                (
                    "collection_type",
                    models.CharField(
                        choices=[
                            ("featured", "Featured Collection"),
                            ("editorial", "Editorial Pick"),
                            ("seasonal", "Seasonal Collection"),
                            ("category", "Category Collection"),
                            ("creator", "Creator Spotlight"),
                            ("performance", "Performance Focus"),
                        ],
                        default="featured",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("is_featured", models.BooleanField(db_index=True, default=False)),
                ("display_order", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_collections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "tune_collections",
                "ordering": ["display_order", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TuneCollectionItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0)),
                ("featured_note", models.CharField(blank=True, max_length=200)),
                ("added_at", models.DateTimeField(auto_now_add=True)),
                (
                    "collection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tunes.tunecollection",
                    ),
                ),
                (
                    "tune",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="tunes.tune"
                    ),
                ),
            ],
            options={
                "db_table": "tune_collection_items",
                "ordering": ["order", "added_at"],
                "unique_together": {("collection", "tune")},
            },
        ),
        migrations.AddField(
            model_name="tunecollection",
            name="tunes",
            field=models.ManyToManyField(
                through="tunes.TuneCollectionItem", to="tunes.tune"
            ),
        ),
        migrations.CreateModel(
            name="TuneCompatibility",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_verified", models.BooleanField(db_index=True, default=False)),
                (
                    "testing_status",
                    models.CharField(
                        choices=[
                            ("untested", "Untested"),
                            ("bench_tested", "Bench Tested"),
                            ("road_tested", "Road Tested"),
                            ("dyno_tested", "Dyno Tested"),
                            ("track_tested", "Track Tested"),
                        ],
                        default="untested",
                        max_length=20,
                    ),
                ),
                ("requires_exhaust_modification", models.BooleanField(default=False)),
                (
                    "requires_air_intake_modification",
                    models.BooleanField(default=False),
                ),
                (
                    "requires_fuel_system_modification",
                    models.BooleanField(default=False),
                ),
                ("minimum_octane_rating", models.PositiveIntegerField(default=91)),
                (
                    "tested_power_gain_hp",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "tested_torque_gain_nm",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "tested_fuel_economy_change",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("test_date", models.DateField(blank=True, null=True)),
                ("test_location", models.CharField(blank=True, max_length=200)),
                ("test_conditions", models.TextField(blank=True)),
                ("dyno_sheet_url", models.URLField(blank=True)),
                ("compatibility_notes", models.TextField(blank=True)),
                ("installation_notes", models.TextField(blank=True)),
                ("known_issues", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "motorcycle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bikes.motorcycle",
                    ),
                ),
                (
                    "tune",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="tunes.tune"
                    ),
                ),
            ],
            options={
                "db_table": "tune_compatibility",
            },
        ),
        migrations.AddField(
            model_name="tune",
            name="compatible_motorcycles",
            field=models.ManyToManyField(
                related_name="compatible_tunes",
                through="tunes.TuneCompatibility",
                to="bikes.motorcycle",
            ),
        ),
        migrations.CreateModel(
            name="TuneCreator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("business_name", models.CharField(blank=True, max_length=200)),
                ("bio", models.TextField(blank=True)),
                ("specialties", models.JSONField(default=list)),
                ("experience_years", models.PositiveIntegerField(default=0)),
                ("certifications", models.JSONField(default=list)),
                ("website", models.URLField(blank=True)),
                ("instagram", models.CharField(blank=True, max_length=100)),
                ("youtube", models.CharField(blank=True, max_length=100)),
                ("facebook", models.CharField(blank=True, max_length=100)),
                ("is_verified", models.BooleanField(db_index=True, default=False)),
                (
                    "verification_level",
                    models.CharField(
                        choices=[
                            ("basic", "Basic Verified"),
                            ("professional", "Professional"),
                            ("expert", "Expert Tuner"),
                            ("oem_partner", "OEM Partner"),
                        ],
                        default="basic",
                        max_length=20,
                    ),
                ),
                ("verification_date", models.DateTimeField(blank=True, null=True)),
                ("total_tunes", models.PositiveIntegerField(default=0)),
                ("total_downloads", models.PositiveIntegerField(default=0)),
                (
                    "average_rating",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=3),
                ),
                (
                    "total_earnings",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
                ),
                ("auto_approve_updates", models.BooleanField(default=False)),
                ("allow_reviews", models.BooleanField(default=True)),
                ("public_profile", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="creator_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "tune_creators",
            },
        ),
        migrations.AddField(
            model_name="tune",
            name="creator",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tunes",
                to="tunes.tunecreator",
            ),
        ),
        migrations.CreateModel(
            name="TunePurchase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "purchase_type",
                    models.CharField(
                        choices=[
                            ("purchase", "One-time Purchase"),
                            ("rental", "Rental"),
                            ("subscription", "Subscription"),
                            ("free_download", "Free Download"),
                        ],
                        default="purchase",
                        max_length=20,
                    ),
                ),
                (
                    "amount_paid",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
                ("currency", models.CharField(default="USD", max_length=3)),
                ("payment_processor", models.CharField(blank=True, max_length=50)),
                (
                    "transaction_id",
                    models.CharField(blank=True, db_index=True, max_length=200),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("refunded", "Refunded"),
                            ("disputed", "Disputed"),
                        ],
                        db_index=True,
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("download_count", models.PositiveIntegerField(default=0)),
                ("max_downloads", models.PositiveIntegerField(default=3)),
                ("downloads_remaining", models.PositiveIntegerField(default=3)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("auto_renew", models.BooleanField(default=False)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("purchase_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tune",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="purchases",
                        to="tunes.tune",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tune_purchases",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "tune_purchases",
            },
        ),
        migrations.CreateModel(
            name="TuneDownload",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "download_type",
                    models.CharField(
                        choices=[
                            ("tune_file", "Tune File"),
                            ("backup_file", "Backup File"),
                            ("documentation", "Documentation"),
                            ("dyno_chart", "Dyno Chart"),
                        ],
                        default="tune_file",
                        max_length=20,
                    ),
                ),
                ("file_size_bytes", models.PositiveIntegerField(default=0)),
                ("download_duration_seconds", models.PositiveIntegerField(default=0)),
                ("user_agent", models.TextField(blank=True)),
                ("ip_address", models.GenericIPAddressField()),
                ("download_method", models.CharField(blank=True, max_length=50)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("started", "Download Started"),
                            ("completed", "Download Completed"),
                            ("failed", "Download Failed"),
                            ("cancelled", "Download Cancelled"),
                        ],
                        default="started",
                        max_length=20,
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "purchase",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="downloads",
                        to="tunes.tunepurchase",
                    ),
                ),
            ],
            options={
                "db_table": "tune_downloads",
            },
        ),
        migrations.CreateModel(
            name="TuneReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "overall_rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "performance_rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "installation_ease",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "value_for_money",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("review_text", models.TextField()),
                ("pros", models.TextField(blank=True)),
                ("cons", models.TextField(blank=True)),
                (
                    "is_verified_purchase",
                    models.BooleanField(db_index=True, default=False),
                ),
                ("is_verified_installation", models.BooleanField(default=False)),
                ("helpful_count", models.PositiveIntegerField(default=0)),
                ("reported_count", models.PositiveIntegerField(default=0)),
                ("is_approved", models.BooleanField(db_index=True, default=True)),
                ("is_featured", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "motorcycle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bikes.motorcycle",
                    ),
                ),
                (
                    "tune",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="tunes.tune",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "tune_reviews",
            },
        ),
        migrations.AddField(
            model_name="tune",
            name="tune_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="tunes.tunetype"
            ),
        ),
        migrations.AddIndex(
            model_name="tunecollection",
            index=models.Index(
                fields=["collection_type", "is_active"],
                name="tune_collec_collect_5032eb_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tunecollection",
            index=models.Index(
                fields=["is_featured", "display_order"],
                name="tune_collec_is_feat_944b00_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tunecollection",
            index=models.Index(
                fields=["created_at"], name="tune_collec_created_d229d6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tunecompatibility",
            index=models.Index(
                fields=["tune", "is_verified"], name="tune_compat_tune_id_dc15bc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tunecompatibility",
            index=models.Index(
                fields=["motorcycle", "testing_status"],
                name="tune_compat_motorcy_7892e8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tunecompatibility",
            index=models.Index(
                fields=["testing_status"], name="tune_compat_testing_4c6da7_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tunecompatibility",
            unique_together={("tune", "motorcycle")},
        ),
        migrations.AddIndex(
            model_name="tunecreator",
            index=models.Index(
                fields=["is_verified"], name="tune_creato_is_veri_5da83b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tunecreator",
            index=models.Index(
                fields=["verification_level"], name="tune_creato_verific_bf4dfa_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tunecreator",
            index=models.Index(
                fields=["average_rating"], name="tune_creato_average_3168b5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tunecreator",
            index=models.Index(
                fields=["total_downloads"], name="tune_creato_total_d_13c0ab_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tunepurchase",
            index=models.Index(
                fields=["user", "payment_status"], name="tune_purcha_user_id_d0a3ff_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tunepurchase",
            index=models.Index(
                fields=["tune", "created_at"], name="tune_purcha_tune_id_0323b5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tunepurchase",
            index=models.Index(
                fields=["transaction_id"], name="tune_purcha_transac_843a7b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tunepurchase",
            index=models.Index(
                fields=["expires_at"], name="tune_purcha_expires_ca8f93_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tunepurchase",
            index=models.Index(
                fields=["payment_status"], name="tune_purcha_payment_bbd611_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tunepurchase",
            unique_together={("tune", "user", "purchase_type")},
        ),
        migrations.AddIndex(
            model_name="tunedownload",
            index=models.Index(
                fields=["purchase", "download_type"],
                name="tune_downlo_purchas_287893_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tunedownload",
            index=models.Index(fields=["status"], name="tune_downlo_status_a6809d_idx"),
        ),
        migrations.AddIndex(
            model_name="tunedownload",
            index=models.Index(
                fields=["created_at"], name="tune_downlo_created_9d5949_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tunedownload",
            index=models.Index(
                fields=["ip_address"], name="tune_downlo_ip_addr_576dc7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tunereview",
            index=models.Index(
                fields=["tune", "is_approved"], name="tune_review_tune_id_b650e3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tunereview",
            index=models.Index(
                fields=["overall_rating"], name="tune_review_overall_84b200_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tunereview",
            index=models.Index(
                fields=["is_verified_purchase"], name="tune_review_is_veri_956788_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tunereview",
            index=models.Index(
                fields=["helpful_count"], name="tune_review_helpful_e9243f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tunereview",
            index=models.Index(
                fields=["created_at"], name="tune_review_created_36bbb7_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tunereview",
            unique_together={("tune", "user")},
        ),
        migrations.AddIndex(
            model_name="tune",
            index=models.Index(
                fields=["creator", "status"], name="tunes_creator_91b6fa_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tune",
            index=models.Index(
                fields=["category", "pricing_type"], name="tunes_categor_f97949_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tune",
            index=models.Index(
                fields=["safety_rating", "is_featured"], name="tunes_safety__03870c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tune",
            index=models.Index(
                fields=["download_count"], name="tunes_downloa_765a1e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tune",
            index=models.Index(
                fields=["average_rating"], name="tunes_average_484eb4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tune",
            index=models.Index(
                fields=["published_at"], name="tunes_publish_50f5f2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tune",
            index=models.Index(fields=["price"], name="tunes_price_44b1f3_idx"),
        ),
        migrations.AddIndex(
            model_name="tune",
            index=models.Index(
                fields=["is_track_only"], name="tunes_is_trac_4d4d2d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tune",
            index=models.Index(fields=["dyno_tested"], name="tunes_dyno_te_8b77a9_idx"),
        ),
        migrations.AddIndex(
            model_name="tune",
            index=models.Index(
                fields=["street_legal"], name="tunes_street__82ecea_idx"
            ),
        ),
    ]
