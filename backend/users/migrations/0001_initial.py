# Generated by Django 5.2.1 on 2025-06-12 17:50

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("bikes", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(db_index=True, max_length=254, unique=True),
                ),
                ("phone_number", models.CharField(blank=True, max_length=20)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                ("country", models.CharField(blank=True, max_length=100)),
                ("state_province", models.CharField(blank=True, max_length=100)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                ("avatar_url", models.URLField(blank=True)),
                ("bio", models.TextField(blank=True, max_length=500)),
                ("website", models.URLField(blank=True)),
                (
                    "profile_visibility",
                    models.CharField(
                        choices=[
                            ("public", "Public"),
                            ("friends", "Friends Only"),
                            ("private", "Private"),
                        ],
                        default="public",
                        max_length=20,
                    ),
                ),
                ("show_riding_stats", models.BooleanField(default=True)),
                ("show_garage", models.BooleanField(default=True)),
                ("metric_units", models.BooleanField(default=True)),
                ("email_notifications", models.BooleanField(default=True)),
                ("push_notifications", models.BooleanField(default=True)),
                ("marketing_emails", models.BooleanField(default=False)),
                ("is_verified", models.BooleanField(db_index=True, default=False)),
                (
                    "verification_token",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                ("is_premium", models.BooleanField(db_index=True, default=False)),
                ("premium_expires_at", models.DateTimeField(blank=True, null=True)),
                ("last_active", models.DateTimeField(auto_now=True)),
                ("join_date", models.DateTimeField(auto_now_add=True)),
                ("login_count", models.PositiveIntegerField(default=0)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="RidingProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "experience_level",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner (0-2 years)"),
                            ("intermediate", "Intermediate (2-5 years)"),
                            ("advanced", "Advanced (5-10 years)"),
                            ("expert", "Expert (10+ years)"),
                            ("professional", "Professional Rider"),
                        ],
                        default="beginner",
                        max_length=20,
                    ),
                ),
                ("years_riding", models.PositiveIntegerField(default=0)),
                ("license_date", models.DateField(blank=True, null=True)),
                (
                    "primary_riding_style",
                    models.CharField(
                        choices=[
                            ("street", "Street Riding"),
                            ("track", "Track/Racing"),
                            ("touring", "Touring"),
                            ("sport", "Sport Riding"),
                            ("cruising", "Cruising"),
                            ("adventure", "Adventure/Dual Sport"),
                            ("commuting", "Commuting"),
                            ("stunting", "Stunting"),
                        ],
                        default="street",
                        max_length=20,
                    ),
                ),
                ("secondary_riding_styles", models.JSONField(blank=True, default=list)),
                (
                    "favorite_riding_conditions",
                    models.JSONField(blank=True, default=list),
                ),
                (
                    "preferred_power_range",
                    models.CharField(
                        choices=[
                            ("low", "Low Power (0-50 HP)"),
                            ("medium", "Medium Power (50-100 HP)"),
                            ("high", "High Power (100-150 HP)"),
                            ("extreme", "Extreme Power (150+ HP)"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "comfort_vs_performance",
                    models.PositiveSmallIntegerField(
                        default=5,
                        help_text="1=Comfort focused, 10=Performance focused",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "safety_priority",
                    models.PositiveSmallIntegerField(
                        default=8,
                        help_text="1=Risk taker, 10=Safety first",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("track_experience", models.BooleanField(default=False)),
                ("racing_experience", models.BooleanField(default=False)),
                ("diy_maintenance", models.BooleanField(default=False)),
                (
                    "tuning_interest",
                    models.PositiveSmallIntegerField(
                        default=5,
                        help_text="1=Stock only, 10=Heavy modification",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="riding_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "riding_profiles",
            },
        ),
        migrations.CreateModel(
            name="UserAchievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "achievement_type",
                    models.CharField(
                        choices=[
                            ("distance", "Distance Milestone"),
                            ("rides", "Ride Count"),
                            ("speed", "Speed Achievement"),
                            ("safety", "Safety Record"),
                            ("social", "Social Engagement"),
                            ("tuning", "Tuning Expertise"),
                            ("platform", "Platform Usage"),
                        ],
                        max_length=20,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("icon_url", models.URLField(blank=True)),
                (
                    "target_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "current_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("is_completed", models.BooleanField(db_index=True, default=False)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("points_awarded", models.PositiveIntegerField(default=0)),
                (
                    "badge_level",
                    models.CharField(
                        choices=[
                            ("bronze", "Bronze"),
                            ("silver", "Silver"),
                            ("gold", "Gold"),
                            ("platinum", "Platinum"),
                        ],
                        default="bronze",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="achievements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_achievements",
            },
        ),
        migrations.CreateModel(
            name="UserGarage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ownership_status",
                    models.CharField(
                        choices=[
                            ("owned", "Currently Owned"),
                            ("previously_owned", "Previously Owned"),
                            ("test_ridden", "Test Ridden"),
                            ("wishlist", "Wishlist"),
                        ],
                        default="owned",
                        max_length=20,
                    ),
                ),
                ("purchase_date", models.DateField(blank=True, null=True)),
                (
                    "purchase_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "current_mileage_km",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("modifications", models.JSONField(blank=True, default=list)),
                ("tune_count", models.PositiveIntegerField(default=0)),
                ("is_tuned", models.BooleanField(default=False)),
                (
                    "overall_rating",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("pros", models.TextField(blank=True)),
                ("cons", models.TextField(blank=True)),
                ("is_public", models.BooleanField(default=True)),
                ("nickname", models.CharField(blank=True, max_length=100)),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "motorcycle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bikes.motorcycle",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="garage",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_garage",
            },
        ),
        migrations.CreateModel(
            name="RideSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ride_type",
                    models.CharField(
                        choices=[
                            ("commute", "Commute"),
                            ("leisure", "Leisure Ride"),
                            ("track", "Track Day"),
                            ("touring", "Touring"),
                            ("test", "Test Ride"),
                            ("maintenance", "Maintenance Run"),
                        ],
                        default="leisure",
                        max_length=20,
                    ),
                ),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("start_location", models.CharField(blank=True, max_length=200)),
                ("end_location", models.CharField(blank=True, max_length=200)),
                ("route_description", models.TextField(blank=True)),
                (
                    "start_latitude",
                    models.DecimalField(
                        blank=True, decimal_places=7, max_digits=10, null=True
                    ),
                ),
                (
                    "start_longitude",
                    models.DecimalField(
                        blank=True, decimal_places=7, max_digits=10, null=True
                    ),
                ),
                (
                    "end_latitude",
                    models.DecimalField(
                        blank=True, decimal_places=7, max_digits=10, null=True
                    ),
                ),
                (
                    "end_longitude",
                    models.DecimalField(
                        blank=True, decimal_places=7, max_digits=10, null=True
                    ),
                ),
                (
                    "distance_km",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "avg_speed_kmh",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "max_speed_kmh",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "fuel_consumed_liters",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "weather_condition",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("sunny", "Sunny"),
                            ("cloudy", "Cloudy"),
                            ("rainy", "Rainy"),
                            ("windy", "Windy"),
                            ("foggy", "Foggy"),
                            ("snow", "Snow"),
                        ],
                        max_length=20,
                    ),
                ),
                ("temperature_celsius", models.IntegerField(blank=True, null=True)),
                (
                    "enjoyment_rating",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "safety_rating",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("is_public", models.BooleanField(default=False)),
                ("share_route", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "motorcycle",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bikes.motorcycle",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ride_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "garage_bike",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="users.usergarage",
                    ),
                ),
            ],
            options={
                "db_table": "ride_sessions",
                "ordering": ["-start_time"],
            },
        ),
        migrations.CreateModel(
            name="UserStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("total_rides", models.PositiveIntegerField(default=0)),
                (
                    "total_distance_km",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("total_ride_time_minutes", models.PositiveIntegerField(default=0)),
                (
                    "avg_ride_distance_km",
                    models.DecimalField(decimal_places=2, default=0, max_digits=8),
                ),
                ("avg_ride_duration_minutes", models.PositiveIntegerField(default=0)),
                (
                    "max_speed_achieved_kmh",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "avg_speed_overall_kmh",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "total_fuel_consumed_liters",
                    models.DecimalField(decimal_places=2, default=0, max_digits=8),
                ),
                ("total_points", models.PositiveIntegerField(default=0)),
                ("achievements_unlocked", models.PositiveIntegerField(default=0)),
                ("tunes_downloaded", models.PositiveIntegerField(default=0)),
                ("tunes_uploaded", models.PositiveIntegerField(default=0)),
                ("community_posts", models.PositiveIntegerField(default=0)),
                ("distance_rank", models.PositiveIntegerField(blank=True, null=True)),
                ("points_rank", models.PositiveIntegerField(blank=True, null=True)),
                ("safety_rank", models.PositiveIntegerField(blank=True, null=True)),
                ("current_ride_streak_days", models.PositiveIntegerField(default=0)),
                ("longest_ride_streak_days", models.PositiveIntegerField(default=0)),
                ("last_ride_date", models.DateField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stats",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_stats",
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="users_email_4b85f2_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["is_verified"], name="users_is_veri_63cd6e_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["is_premium"], name="users_is_prem_41b83a_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["last_active"], name="users_last_ac_323696_idx"),
        ),
        migrations.AddIndex(
            model_name="userachievement",
            index=models.Index(
                fields=["user", "is_completed"], name="user_achiev_user_id_171932_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userachievement",
            index=models.Index(
                fields=["achievement_type"], name="user_achiev_achieve_b96239_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userachievement",
            unique_together={("user", "achievement_type", "name")},
        ),
        migrations.AddIndex(
            model_name="usergarage",
            index=models.Index(
                fields=["user", "ownership_status"],
                name="user_garage_user_id_6ec869_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="usergarage",
            index=models.Index(
                fields=["motorcycle"], name="user_garage_motorcy_f187fe_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usergarage",
            index=models.Index(
                fields=["is_public"], name="user_garage_is_publ_088400_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="usergarage",
            unique_together={("user", "motorcycle", "ownership_status")},
        ),
        migrations.AddIndex(
            model_name="ridesession",
            index=models.Index(
                fields=["user", "-start_time"], name="ride_sessio_user_id_d91a96_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ridesession",
            index=models.Index(
                fields=["motorcycle"], name="ride_sessio_motorcy_a3a9ed_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ridesession",
            index=models.Index(
                fields=["ride_type"], name="ride_sessio_ride_ty_d6c490_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ridesession",
            index=models.Index(
                fields=["is_public"], name="ride_sessio_is_publ_f477f9_idx"
            ),
        ),
    ]
