# Generated by Django 5.2.1 on 2025-06-12 20:56

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("users", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Community",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("short_description", models.CharField(blank=True, max_length=200)),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("public", "Public"),
                            ("private", "Private"),
                            ("hidden", "Hidden"),
                        ],
                        default="public",
                        max_length=20,
                    ),
                ),
                ("avatar_url", models.URLField(blank=True)),
                ("banner_url", models.URLField(blank=True)),
                ("location", models.CharField(blank=True, max_length=100)),
                ("website", models.URLField(blank=True)),
                ("focus_tags", models.JSONField(default=list)),
                (
                    "primary_category",
                    models.CharField(
                        choices=[
                            ("riding_club", "Riding Club"),
                            ("brand_enthusiasts", "Brand Enthusiasts"),
                            ("technical", "Technical Discussion"),
                            ("track_racing", "Track & Racing"),
                            ("adventure", "Adventure Riding"),
                            ("custom_builds", "Custom Builds"),
                            ("beginner_focused", "Beginner Focused"),
                            ("local_rides", "Local Rides"),
                        ],
                        default="riding_club",
                        max_length=50,
                    ),
                ),
                ("member_count", models.PositiveIntegerField(default=0)),
                ("post_count", models.PositiveIntegerField(default=0)),
                ("event_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "admins",
                    models.ManyToManyField(
                        related_name="administered_communities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_communities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Communities",
                "db_table": "communities",
            },
        ),
        migrations.CreateModel(
            name="CommunityMembership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Approval"),
                            ("active", "Active Member"),
                            ("moderator", "Moderator"),
                            ("admin", "Administrator"),
                            ("banned", "Banned"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("join_date", models.DateTimeField(auto_now_add=True)),
                ("last_active_date", models.DateTimeField(auto_now=True)),
                ("receive_notifications", models.BooleanField(default=True)),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.community",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "community_memberships",
            },
        ),
        migrations.AddField(
            model_name="community",
            name="members",
            field=models.ManyToManyField(
                related_name="communities",
                through="users.CommunityMembership",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="CommunityPost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                ("has_images", models.BooleanField(default=False)),
                ("images", models.JSONField(default=list)),
                (
                    "post_type",
                    models.CharField(
                        choices=[
                            ("discussion", "Discussion"),
                            ("question", "Question"),
                            ("event", "Event Announcement"),
                            ("ride_report", "Ride Report"),
                            ("build_log", "Build Log"),
                            ("review", "Review"),
                            ("poll", "Poll"),
                        ],
                        default="discussion",
                        max_length=20,
                    ),
                ),
                ("is_pinned", models.BooleanField(default=False)),
                ("is_closed", models.BooleanField(default=False)),
                ("is_hidden", models.BooleanField(default=False)),
                ("view_count", models.PositiveIntegerField(default=0)),
                ("comment_count", models.PositiveIntegerField(default=0)),
                ("like_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="community_posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to="users.community",
                    ),
                ),
                (
                    "garage_bike",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="community_posts",
                        to="users.usergarage",
                    ),
                ),
                (
                    "ride_session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="community_posts",
                        to="users.ridesession",
                    ),
                ),
            ],
            options={
                "db_table": "community_posts",
            },
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField()),
                ("has_attachment", models.BooleanField(default=False)),
                ("attachment_url", models.URLField(blank=True)),
                ("attachment_type", models.CharField(blank=True, max_length=50)),
                ("is_read", models.BooleanField(default=False)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("is_system_message", models.BooleanField(default=False)),
                ("is_ride_share", models.BooleanField(default=False)),
                ("ride_session_id", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "messages",
            },
        ),
        migrations.CreateModel(
            name="MessageReceipt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_read", models.BooleanField(default=False)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                (
                    "message",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="receipts",
                        to="users.message",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="message_receipts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "message_receipts",
            },
        ),
        migrations.CreateModel(
            name="MessageThread",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=100)),
                ("is_group_thread", models.BooleanField(default=False)),
                ("avatar_url", models.URLField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("last_message_at", models.DateTimeField(auto_now_add=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_threads",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "participants",
                    models.ManyToManyField(
                        related_name="message_threads", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "message_threads",
            },
        ),
        migrations.AddField(
            model_name="message",
            name="thread",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="messages",
                to="users.messagethread",
            ),
        ),
        migrations.CreateModel(
            name="PointTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("points", models.IntegerField()),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("achievement", "Achievement Unlocked"),
                            ("ride", "Ride Completed"),
                            ("social", "Social Interaction"),
                            ("purchase", "Tune Purchase"),
                            ("referral", "User Referral"),
                            ("bonus", "Bonus Points"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="point_transactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PostComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField()),
                ("has_image", models.BooleanField(default=False)),
                ("image_url", models.URLField(blank=True)),
                ("is_hidden", models.BooleanField(default=False)),
                ("like_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="post_comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent_comment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="users.postcomment",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="users.communitypost",
                    ),
                ),
            ],
            options={
                "db_table": "post_comments",
            },
        ),
        migrations.CreateModel(
            name="UserFriend",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("rejected", "Rejected"),
                            ("blocked", "Blocked"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "friend",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="friended_by",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="friends",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_friends",
            },
        ),
        migrations.AddIndex(
            model_name="communitymembership",
            index=models.Index(
                fields=["community", "status"], name="community_m_communi_accb00_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="communitymembership",
            index=models.Index(
                fields=["user", "status"], name="community_m_user_id_b2ae7b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="communitymembership",
            index=models.Index(
                fields=["last_active_date"], name="community_m_last_ac_8effb3_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="communitymembership",
            unique_together={("community", "user")},
        ),
        migrations.AddIndex(
            model_name="community",
            index=models.Index(
                fields=["visibility"], name="communities_visibil_6b9159_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="community",
            index=models.Index(
                fields=["primary_category"], name="communities_primary_aecb2e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="community",
            index=models.Index(
                fields=["member_count"], name="communities_member__5e2d9d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="community",
            index=models.Index(
                fields=["post_count"], name="communities_post_co_4fbb98_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="communitypost",
            index=models.Index(
                fields=["community", "-created_at"],
                name="community_p_communi_db9b1d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="communitypost",
            index=models.Index(
                fields=["author"], name="community_p_author__16beaf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="communitypost",
            index=models.Index(
                fields=["post_type"], name="community_p_post_ty_3991e5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="communitypost",
            index=models.Index(
                fields=["is_pinned", "is_closed"], name="community_p_is_pinn_63edc4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="communitypost",
            index=models.Index(
                fields=["comment_count"], name="community_p_comment_610607_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="communitypost",
            index=models.Index(
                fields=["like_count"], name="community_p_like_co_062f8f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="messagereceipt",
            index=models.Index(
                fields=["user", "is_read"], name="message_rec_user_id_a4eea2_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="messagereceipt",
            unique_together={("message", "user")},
        ),
        migrations.AddIndex(
            model_name="messagethread",
            index=models.Index(
                fields=["is_group_thread"], name="message_thr_is_grou_1b3d9e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="messagethread",
            index=models.Index(
                fields=["last_message_at"], name="message_thr_last_me_475f12_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="messagethread",
            index=models.Index(
                fields=["is_active"], name="message_thr_is_acti_e8a834_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["thread", "-created_at"], name="messages_thread__b340e9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(fields=["sender"], name="messages_sender__6ae55a_idx"),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(fields=["is_read"], name="messages_is_read_6a69c0_idx"),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["is_system_message"], name="messages_is_syst_e8c19c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["is_ride_share"], name="messages_is_ride_b7fe71_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="postcomment",
            index=models.Index(
                fields=["post", "-created_at"], name="post_commen_post_id_4c6246_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="postcomment",
            index=models.Index(
                fields=["author"], name="post_commen_author__2198b0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="postcomment",
            index=models.Index(
                fields=["parent_comment"], name="post_commen_parent__50729f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="postcomment",
            index=models.Index(
                fields=["like_count"], name="post_commen_like_co_bcb9f9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userfriend",
            index=models.Index(
                fields=["user", "status"], name="user_friend_user_id_08f7e8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userfriend",
            index=models.Index(
                fields=["friend", "status"], name="user_friend_friend__78a9c1_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userfriend",
            unique_together={("user", "friend")},
        ),
    ]
